name: Deploy Next.js to EC2 (Build on Actions)

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Next.js app
        run: pnpm build

      - name: Prepare deployment package
        run: |
          mkdir -p deployment_package

          echo "Copying .next directory..."
          cp -R .next deployment_package/

          echo "Checking for public directory..."
          if [ -d "public" ]; then
            echo "'public' directory found. Copying..."
            cp -R public deployment_package/
          else
            echo "Warning: 'public' directory not found. Skipping copy."
          fi

          echo "Copying package.json..."
          cp package.json deployment_package/

          echo "Copying pnpm-lock.yaml..."
          cp pnpm-lock.yaml deployment_package/

          echo "Checking for next.config.mjs file..."
          if [ -f "next.config.mjs" ]; then
            echo "'next.config.mjs' file found. Copying..."
            cp next.config.mjs deployment_package/
          else
            echo "Warning: 'next.config.mjs' file not found. Skipping copy."
          fi

          echo "Contents of deployment_package:"
          ls -la deployment_package/

      - name: Validate deployment prerequisites
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Validate required environment
            if [ ! -d "${{ secrets.EC2_TARGET }}" ]; then
              echo "Error: Target directory ${{ secrets.EC2_TARGET }} does not exist"
              exit 1
            fi
            
            # Check if Node.js environment is available
            [ -s "$HOME/.nvm/nvm.sh" ] && source "$HOME/.nvm/nvm.sh"
            if ! command -v node >/dev/null 2>&1; then
              echo "Error: Node.js is not available"
              exit 1
            fi
            
            echo "Prerequisites validated successfully"

      - name: Deploy to EC2 via SSH and rsync
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER: ${{ secrets.EC2_USER }}
          SOURCE: 'deployment_package/*'
          TARGET: ${{ secrets.EC2_TARGET }}
          ARGS: '-avz --delete'

      - name: Execute remote commands on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ${{ secrets.EC2_TARGET }}

            # Source environment for Node.js and PM2
            export PATH="$HOME/.nvm/versions/node/$(nvm current)/bin:$PATH"
            [ -s "$HOME/.nvm/nvm.sh" ] && source "$HOME/.nvm/nvm.sh"
            [ -s "$HOME/.bashrc" ] && source "$HOME/.bashrc"

            # Verify Node.js and PM2 are available
            echo "Node.js version: $(node --version)"
            echo "PM2 version: $(pm2 --version)"

            # Install production dependencies
            if [ -n "${{ secrets.ENV_FILE_PRODUCTION }}" ]; then
              echo "${{ secrets.ENV_FILE_PRODUCTION }}" > .env.production
              echo ".env.production file created."
            else
              echo "ENV_FILE_PRODUCTION secret is not set. Skipping .env.production creation."
            fi

            echo "Installing production dependencies..."
            pnpm install --prod --frozen-lockfile

            # Check if PM2 process exists, restart if it does, start if it doesn't
            if pm2 describe nextjs-portfolio-blog > /dev/null 2>&1; then
              echo "PM2 process exists. Restarting..."
              pm2 restart nextjs-portfolio-blog
            else
              echo "PM2 process doesn't exist. Starting new process..."
              pm2 start npm --name "nextjs-portfolio-blog" -- start
            fi

            # Verify deployment
            pm2 status nextjs-portfolio-blog
            echo "Deployment completed successfully."

      - name: Validate deployment health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Wait for application to start
            sleep 10
            
            # Source environment
            [ -s "$HOME/.nvm/nvm.sh" ] && source "$HOME/.nvm/nvm.sh"
            [ -s "$HOME/.bashrc" ] && source "$HOME/.bashrc"
            
            # Check if PM2 process is running
            if ! pm2 describe nextjs-portfolio-blog | grep -q "online"; then
              echo "Error: Application is not running properly"
              pm2 logs nextjs-portfolio-blog --lines 20
              exit 1
            fi
            
            echo "Health check passed - Application is running successfully"


