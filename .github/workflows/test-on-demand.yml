name: Test on Demand

on:
  issue_comment:
    types: [created]

jobs:
  check-comment:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/test')
    runs-on: ubuntu-latest
    steps:
      - name: Check if comment contains /test
        run: echo "Test command detected in PR comment"

  run-tests:
    needs: check-comment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              head_sha: pr.head.sha,
              head_ref: pr.head.ref
            };

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.pr.outputs.result).head_ref }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm type-check

      - name: Run ESLint
        run: pnpm lint

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');

            // Read coverage summary if available
            let coverageInfo = '';
            try {
              const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverageData.total;
              coverageInfo = `
            ## Test Coverage
            - **Lines:** ${total.lines.pct}%
            - **Statements:** ${total.statements.pct}%
            - **Functions:** ${total.functions.pct}%
            - **Branches:** ${total.branches.pct}%
            `;
            } catch (error) {
              coverageInfo = '\n## Test Coverage\nCoverage report not available.';
            }

            const jobStatus = '${{ job.status }}';
            const emoji = jobStatus === 'success' ? '✅' : '❌';

            const comment = `${emoji} **Test Results** (triggered by \`/test\` command)

            **Status:** ${jobStatus === 'success' ? 'PASSED' : 'FAILED'}
            **Workflow:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ${coverageInfo}

            <details>
            <summary>Job Details</summary>

            - **Type Check:** ${jobStatus === 'success' ? '✅ Passed' : '❌ Failed'}
            - **ESLint:** ${jobStatus === 'success' ? '✅ Passed' : '❌ Failed'}
            - **Unit Tests:** ${jobStatus === 'success' ? '✅ Passed' : '❌ Failed'}

            </details>

            ---
            *Triggered by: @${{ github.event.comment.user.login }}*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
