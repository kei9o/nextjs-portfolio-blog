name: Dependabot Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'

      - name: Check if auto-merge is allowed
        id: auto-merge-check
        run: |
          update_type="${{ steps.dependabot-metadata.outputs.update-type }}"
          dependency_type="${{ steps.dependabot-metadata.outputs.dependency-type }}"

          # Auto-merge conditions
          # 1. Only for minor and patch updates
          # 2. Skip if it's a security update
          # 3. Development dependencies get more lenient treatment

          if [[ "$update_type" == "version-update:semver-patch" ]] || [[ "$update_type" == "version-update:semver-minor" ]]; then
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Auto-merge allowed for $update_type"
          else
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "‚ùå Auto-merge not allowed for $update_type"
          fi

      - name: Wait for PR checks to complete
        if: steps.auto-merge-check.outputs.auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const checkName = 'validate-pr';
            const ref = context.payload.pull_request.head.sha;
            let attempts = 0;
            const maxAttempts = 30; // 5 minutes with 10 second intervals

            console.log(`Waiting for check '${checkName}' on ref ${ref}`);

            while (attempts < maxAttempts) {
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: ref
              });
              
              const check = checkRuns.check_runs.find(run => run.name === checkName);
              
              if (check) {
                console.log(`Check ${checkName} status: ${check.status}, conclusion: ${check.conclusion || 'N/A'}`);
                if (check.status === 'completed') {
                  if (check.conclusion === 'success') {
                    console.log('‚úÖ Check passed!');
                    return;
                  } else {
                    throw new Error(`Check failed with conclusion: ${check.conclusion}`);
                  }
                }
              } else {
                console.log(`Check ${checkName} not found yet...`);
              }
              
              console.log(`Attempt ${attempts + 1}/${maxAttempts} - Waiting 10 seconds...`);
              await new Promise(resolve => setTimeout(resolve, 10000)); // 10 seconds
              attempts++;
            }

            throw new Error('Timeout waiting for check to complete');

      - name: Approve PR
        if: steps.auto-merge-check.outputs.auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE'
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        if: steps.auto-merge-check.outputs.auto_merge == 'true'
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add comment for manual review
        if: steps.auto-merge-check.outputs.auto_merge == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const updateType = '${{ steps.dependabot-metadata.outputs.update-type }}';
            const dependencyNames = '${{ steps.dependabot-metadata.outputs.dependency-names }}';

            // Check for existing comments to prevent duplicates
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Look for existing bot comment about manual review
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üîç Manual Review Required') &&
              comment.body.includes(dependencyNames)
            );

            if (existingComment) {
              console.log('Manual review comment already exists, skipping duplicate comment');
              return;
            }

            const comment = `## üîç Manual Review Required

            This Dependabot PR requires manual review because:
            - Update type: **${updateType}**
            - Dependencies: ${dependencyNames}

            Major version updates require manual review to ensure compatibility.

            Please review the changes and merge manually if appropriate.`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            console.log('Posted manual review comment for major version update');
