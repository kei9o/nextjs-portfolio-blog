name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm type-check

      - name: Run ESLint
        run: pnpm lint

      - name: Check code formatting
        run: pnpm format:check

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-coverage-report-${{ github.event.pull_request.number }}
          path: coverage/
          retention-days: 30

      - name: Comment PR with validation results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');

            // Read coverage summary if available
            let coverageInfo = '';
            try {
              const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverageData.total;
              coverageInfo = `
            ## Test Coverage
            - **Lines:** ${total.lines.pct}%
            - **Statements:** ${total.statements.pct}%
            - **Functions:** ${total.functions.pct}%
            - **Branches:** ${total.branches.pct}%
            `;
            } catch (error) {
              coverageInfo = '\n## Test Coverage\nCoverage report not available.';
            }

            const jobStatus = '${{ job.status }}';
            const emoji = jobStatus === 'success' ? '‚úÖ' : '‚ùå';

            const comment = `${emoji} **PR Validation Results**

            **Status:** ${jobStatus === 'success' ? 'PASSED' : 'FAILED'}
            **Workflow:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ${coverageInfo}

            <details>
            <summary>Validation Details</summary>

            - **Type Check:** ${jobStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
            - **ESLint:** ${jobStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
            - **Code Formatting:** ${jobStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
            - **Unit Tests:** ${jobStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}

            </details>

            ---
            üîÑ **Automatic validation** runs on every PR update to ensure code quality.
            `;

            // Check if this is a comment update or new comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Validation Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
